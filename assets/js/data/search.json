[ { "title": "Algorithm 1 reduce()", "url": "/posts/reduce/", "categories": "Algorithms", "tags": "apl, algorithm, reduction, python", "date": "2022-09-21 19:00:00 +0200", "snippet": "reduce(): the most useful algorithm in many programming languagesIntroductionIn its essence, the computer program is a series of simple ideas put together to perform a complex process, and so we can refer to the computer program as the composition of abstract things called data, and some processes we perform over these things are called algorithms, in other words, Algorithms+Data Structures=Programs “The acts of the mind, wherein it exerts its power over simple ideas, are chiefly these three: Combining several simple ideas into one compound one, and thus all complex ideas are made. the second is bringing two ideas, whether simple or complex, together, and setting them by one another so as to take a view of them at once, without uniting them into one, by which it gets all its ideas of relations. the third is separating them from all other ideas that accompany them in their real existence: this is called abstraction, and thus all its general ideas are made” 1 We’ll start our journey to the fascinating world of algorithms, by studying one simple algorithm, the reduce algorithm, hopefully, by the end, you’d appreciate the power and simplicity of this algorithm, and it may very well be your favorite algorithm for a long time to come.1. Functions definitionWe use the term Algorithm interchangeably with the term function, in fact, “reduce()” is a special kind of function that takes functions as input, to explain why it does that, we need to know what it does, before that, we need to define special types of functions.A higher-order function is a function that takes functions as input.2Dyadic function/binary operation is the function that takes two inputs.3Lambda function is the function that’s not bound to an identifier, i.e., has no name, and used to be taken as an input to higher-order functions.42. The Reduction OperationReduce take a dyadic function and generalize this function to take any number of inputs then apply this function to a sequence.Let’s use Python to demonstrate, first let’s define a lambda function that takes two inputs and returns the sumlambda x, y: x + ynow let’s try to apply this function to 1, 2 and print the outputprint((lambda x, y: x + y)(1, 2))it outputs3as expected, now let’s generate the first 100 non-negative integers (from 0 to 99)range(100)now to add these 100 numbers we could just writeprint(reduce(lambda x, y: x + y, range(100)))and the output is4950here we can appreciate the power of reduce(), we just added 100 numbers, with a one-liner!We can also get the maximum element in an array if we use the right lambdaprint(reduce(lambda x, y: x if (x &gt; y) else y, [1, 7, 3]))7more than 70 algorithms in the c++ standard library can be written as a composition of reduce() and another function, and this is the case in many programming languages, we can show that with the Python built-in functionssum() # reduce(lambda x, y: x + y)max() # reduce(lambda x, y: x if x &gt; y else y)min() # reduce(lambda x, y: x if x &lt; y else y)any() # reduce(lambda x, y: x or y) checks if any element in the list represents a Truthy valueall() # reduce(lambda x, y: x and y) checks if all the elements in the list represent Truthy valuesnote that: you can do all of the previous functions in the form of raw for loops, we will discuss why it’s bad to write raw loops at another time.3. Consistency of naming across languagesBeing such a powerful tool, the reduction algorithm has a few consistent names among the programming languages:|Language|name|from|DOC||–|–|–|–| | Python|reduce|functools|DOC c++|reduce|&lt;numeric&gt;|DOC|| Kotlin|reduce|collections|DOC| Ruby|reduce|Enumrable|DOC|| C#|Aggregate|Enumrable|DOC|| Haskell|foldl|Data.List|DOC|4. Notation as a tool of thought 5to fully appreciate the reduce function, let’s get away from the long words and different names, and let’s focus on the idea of reduction, and let’s introduce a new language called APL.in APL everything is a vector/array for example\t1 2 3 4 5 6is the vector of numbers from 1 to 6you can add two vectors\t1 5 7 + 2 9 18 3 14 25\t⍝ use this glyph ⍝ to add a commentand in APL == is just =, and the assignment operator is ←\t5 = 7 ⍝ 0\t⍝ you can operate between a scaler and a vector\t1 + 2 3 73 4 8\t⍝ so we can check if any element in a vector equals 5 just by writing 5 = vector\t5 = 1 2 3 4 5 6 7 8 90 0 0 0 1 0 0 0 0 if you want to generate the numbers from 1 to n you just use the function iota ⍳\t⍳ 51 2 3 4 5\t⍳ 201 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20and finally, reduce is just / if you want to perform addition reduction on vector\t⍝ assign a value to the vector\tvector ← 1 2 5 7 8 99 10\t⍝addition reduction over vector\t+/vector132\t⍝ to sum the numbers from 1 to n\t⍝ we generate them using iota\tn ← 19\t⍳ n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\t⍝ and then we just add reduce over them\t+/⍳n190let’s use reduce to check if a string contains the letter ‘M’\t'hello, APL'hello, APL\t'M'='hello, APL'0 0 0 0 0 0 0 0 0 0\t∨/'M'='hello, APL' ⍝ we reduce the logical OR over the result of isEqual0\t⍝ 0 ∨ 0 = 0\t⍝ 0 ∨ 1 = 1\t⍝ 1 ∨ 0 = 1\t⍝ 1 ∨ 1 = 1\t∨/'M'='BY NOW YOU MUST THINK, OH REDUCE IS AWESOME'1if you want to try APL visit: TryAPL5. Conclusionyour language comes with a set of expressive built-in functions, just like reduce, there is scan(accumulate), filter, map, window, adjecent_difference and so much more we will discuss, learn your library, it’ll help you write more readable and expressive code. John Locke, An Essay Concerning Human Understanding (1690). &#8617; Higher-order function . &#8617; Dyadic function - APL. &#8617; Anonymous function &#8617; notation as a tool of thought is the name of a paper written by Kenneth E. Iverson, who was honored with the Turing Award in 1979. &#8617; " } ]
